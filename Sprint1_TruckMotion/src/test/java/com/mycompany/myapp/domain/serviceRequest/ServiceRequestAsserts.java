package com.mycompany.myapp.domain.serviceRequest;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ServiceRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceRequestAllPropertiesEquals(ServiceRequest expected, ServiceRequest actual) {
        assertServiceRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceRequestAllUpdatablePropertiesEquals(ServiceRequest expected, ServiceRequest actual) {
        assertServiceRequestUpdatableFieldsEquals(expected, actual);
        assertServiceRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceRequestAutoGeneratedPropertiesEquals(ServiceRequest expected, ServiceRequest actual) {
        assertThat(expected)
            .as("Verify ServiceRequest auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceRequestUpdatableFieldsEquals(ServiceRequest expected, ServiceRequest actual) {
        assertThat(expected)
            .as("Verify ServiceRequest relevant properties")
            .satisfies(e -> assertThat(e.getItems()).as("check items").isEqualTo(actual.getItems()))
            .satisfies(e -> assertThat(e.getServiceName()).as("check serviceName").isEqualTo(actual.getServiceName()))
            .satisfies(e -> assertThat(e.getTotalWeightOfItems()).as("check totalWeightOfItems").isEqualTo(actual.getTotalWeightOfItems()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()).isEqualTo(actual.getDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceRequestUpdatableRelationshipsEquals(ServiceRequest expected, ServiceRequest actual) {
        assertThat(expected)
            .as("Verify ServiceRequest relationships")
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()));
    }
}
