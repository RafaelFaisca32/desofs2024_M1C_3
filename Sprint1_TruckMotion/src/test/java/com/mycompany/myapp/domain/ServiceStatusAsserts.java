package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ServiceStatusAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceStatusAllPropertiesEquals(ServiceStatus expected, ServiceStatus actual) {
        assertServiceStatusAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceStatusAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceStatusAllUpdatablePropertiesEquals(ServiceStatus expected, ServiceStatus actual) {
        assertServiceStatusUpdatableFieldsEquals(expected, actual);
        assertServiceStatusUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceStatusAutoGeneratedPropertiesEquals(ServiceStatus expected, ServiceStatus actual) {
        assertThat(expected)
            .as("Verify ServiceStatus auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceStatusUpdatableFieldsEquals(ServiceStatus expected, ServiceStatus actual) {
        assertThat(expected)
            .as("Verify ServiceStatus relevant properties")
            .satisfies(e -> assertThat(e.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getObservations()).as("check observations").isEqualTo(actual.getObservations()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceStatusUpdatableRelationshipsEquals(ServiceStatus expected, ServiceStatus actual) {
        assertThat(expected)
            .as("Verify ServiceStatus relationships")
            .satisfies(e -> assertThat(e.getServiceRequest()).as("check serviceRequest").isEqualTo(actual.getServiceRequest()));
    }
}
